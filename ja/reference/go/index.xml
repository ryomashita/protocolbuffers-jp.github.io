<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol Buffers Documentation – Goリファレンス</title><link>https://protobuf.dev/ja/reference/go/</link><description>Recent content in Goリファレンス on Protocol Buffers Documentation</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://protobuf.dev/ja/reference/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Reference: Go Generated Code Guide</title><link>https://protobuf.dev/ja/reference/go/go-generated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/go/go-generated/</guid><description>
&lt;p>proto2 と proto3 で生成されるコードの違いは強調されています - これらの違いは、このドキュメントで説明されている生成されたコードにあります。これは、両バージョンで同じであるベースAPIではありません。このドキュメントを読む前に、&lt;a href="https://protobuf.dev/programming-guides/proto2">proto2 言語ガイド&lt;/a> および/または &lt;a href="https://protobuf.dev/programming-guides/proto3">proto3 言語ガイド&lt;/a> を読む必要があります。&lt;/p>
&lt;h2 id="invocation">コンパイラの呼び出し&lt;/h2>
&lt;p>プロトコルバッファコンパイラは、Goコードを生成するためにプラグインが必要です。Go 1.16 以上を使用して、次のコマンドを実行してインストールします:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これにより、&lt;code>protoc-gen-go&lt;/code> バイナリが &lt;code>$GOBIN&lt;/code> にインストールされます。インストール場所を変更するには、&lt;code>$GOBIN&lt;/code> 環境変数を設定します。プロトコルバッファコンパイラがそれを見つけるためには、&lt;code>$PATH&lt;/code> にある必要があります。&lt;/p>
&lt;p>プロトコルバッファコンパイラは、&lt;code>go_out&lt;/code> フラグを使用してGo出力を生成します。&lt;code>go_out&lt;/code> フラグの引数は、コンパイラがGo出力を書き込むディレクトリです。各 &lt;code>.proto&lt;/code> ファイル入力に対して、コンパイラは単一のソースファイルを作成します。出力ファイルの名前は、&lt;code>.proto&lt;/code> 拡張子を &lt;code>.pb.go&lt;/code> に置き換えることで作成されます。&lt;/p>
&lt;p>生成された &lt;code>.pb.go&lt;/code> ファイルが出力ディレクトリ内のどこに配置されるかは、コンパイラフラグに依存します。いくつかの出力モードがあります:&lt;/p>
&lt;ul>
&lt;li>&lt;code>paths=import&lt;/code> フラグが指定されている場合、出力ファイルは、Goパッケージのインポートパスに基づいたディレクトリに配置されます（たとえば、&lt;code>.proto&lt;/code> ファイル内の &lt;code>go_package&lt;/code> オプションで提供されるもの）。たとえば、Goインポートパスが &lt;code>example.com/project/protos/fizz&lt;/code> である入力ファイル &lt;code>protos/buzz.proto&lt;/code> は、出力ファイルが &lt;code>example.com/project/protos/fizz/buzz.pb.go&lt;/code> になります。&lt;code>paths&lt;/code> フラグが指定されていない場合、これがデフォルトの出力モードです。&lt;/li>
&lt;li>&lt;code>module=$PREFIX&lt;/code> フラグが指定されている場合、出力ファイルは、Goパッケージのインポートパスに基づいたディレクトリに配置されます（たとえば、&lt;code>.proto&lt;/code> ファイル内の &lt;code>go_package&lt;/code> オプションで提供されるもの）、ただし、指定されたディレクトリプレフィックスが出力ファイル名から削除されます。たとえば、Goインポートパスが &lt;code>example.com/project/protos/fizz&lt;/code> であり、&lt;code>example.com/project&lt;/code> が &lt;code>module&lt;/code> プレフィックスとして指定されている場合、出力ファイルは &lt;code>protos/fizz/buzz.pb.go&lt;/code> になります。モジュールパス外にGoパッケージを生成するとエラーが発生します。このモードは、生成されたファイルを直接Goモジュールに出力するために便利です。&lt;/li>
&lt;li>&lt;code>paths=source_relative&lt;/code> フラグが指定されている場合、出力ファイルは、入力ファイルと同じ相対ディレクトリに配置されます。たとえば、入力ファイル &lt;code>protos/buzz.proto&lt;/code> は、出力ファイルが &lt;code>protos/buzz.pb.go&lt;/code> になります。&lt;/li>
&lt;/ul>
&lt;p>フラグは、&lt;code>protoc&lt;/code>を呼び出す際に&lt;code>go_opt&lt;/code>フラグを渡すことで、&lt;code>protoc-gen-go&lt;/code>に固有のものが提供されます。複数の&lt;code>go_opt&lt;/code>フラグを渡すことができます。例えば、次のように実行します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src --go_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>out --go_opt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">paths&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>source_relative foo.proto bar/baz.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、&lt;code>src&lt;/code>ディレクトリ内の入力ファイル&lt;code>foo.proto&lt;/code>と&lt;code>bar/baz.proto&lt;/code>を読み取り、出力ファイル&lt;code>foo.pb.go&lt;/code>と&lt;code>bar/baz.pb.go&lt;/code>を&lt;code>out&lt;/code>ディレクトリに書き込みます。必要に応じてコンパイラはネストされた出力サブディレクトリを自動的に作成しますが、出力ディレクトリ自体は作成しません。&lt;/p>
&lt;h2 id="package">パッケージ&lt;/h2>
&lt;p>Goコードを生成するためには、各&lt;code>.proto&lt;/code>ファイルに対してGoパッケージのインポートパスを指定する必要があります（&lt;code>.proto&lt;/code>ファイルが生成される&lt;code>.proto&lt;/code>ファイルに間接的に依存している場合も含む）。Goインポートパスを指定する方法は2つあります：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.proto&lt;/code>ファイル内で宣言するか、&lt;/li>
&lt;li>&lt;code>protoc&lt;/code>を呼び出す際にコマンドラインで宣言するか。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>protoc&lt;/code>を呼び出す際にGoインポートパスを指定することをお勧めします。&lt;code>.proto&lt;/code>ファイル内でGoパッケージを宣言することで、&lt;code>.proto&lt;/code>ファイルのGoパッケージが&lt;code>.proto&lt;/code>ファイル自体と一緒に一元的に識別され、&lt;code>protoc&lt;/code>を呼び出す際に渡すフラグのセットを簡素化できます。&lt;code>.proto&lt;/code>ファイルに対するGoインポートパスが&lt;code>.proto&lt;/code>ファイル自体とコマンドラインの両方で提供される場合、後者が優先されます。&lt;/p>
&lt;p>Goインポートパスは、&lt;code>.proto&lt;/code>ファイル内で&lt;code>go_package&lt;/code>オプションを使用してGoパッケージの完全なインポートパスを宣言することでローカルに指定されます。使用例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">go_package&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example.com/project/protos/fizz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラを呼び出す際にGoインポートパスを指定するには、1つ以上の&lt;code>M${PROTO_FILE}=${GO_IMPORT_PATH}&lt;/code>フラグを渡すことで可能です。使用例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --go_opt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Mprotos/buzz.proto&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>example.com/project/protos/fizz &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --go_opt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Mprotos/bar.proto&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>example.com/project/protos/foo &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> protos/buzz.proto protos/bar.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>すべての&lt;code>.proto&lt;/code>ファイルをそれぞれのGoインポートパスにマッピングすることは非常に大きな作業となるため、この方法でGoインポートパスを指定することは、通常、依存関係ツリー全体を制御するビルドツール（例：&lt;a href="https://bazel.build/">Bazel&lt;/a>）によって実行されます。特定の&lt;code>.proto&lt;/code>ファイルに重複するエントリがある場合、最後に指定されたものが優先されます。&lt;/p>
&lt;p>&lt;code>go_package&lt;/code> オプションと &lt;code>M&lt;/code> フラグの両方について、値にはセミコロンで区切られたインポートパスから明示的なパッケージ名を含めることができます。例: &lt;code>&amp;quot;example.com/protos/foo;package_name&amp;quot;&lt;/code>。この使用法は推奨されていません。なぜなら、パッケージ名は通常、インポートパスから適切な方法でデフォルトで派生されるからです。&lt;/p>
&lt;p>インポートパスは、1 つの &lt;code>.proto&lt;/code> ファイルが別の &lt;code>.proto&lt;/code> ファイルをインポートする場合に生成されるインポートステートメントを決定するために使用されます。例えば、&lt;code>a.proto&lt;/code> が &lt;code>b.proto&lt;/code> をインポートする場合、生成された &lt;code>a.pb.go&lt;/code> ファイルは、生成された &lt;code>b.pb.go&lt;/code> ファイルを含む Go パッケージをインポートする必要があります（両方のファイルが同じパッケージにない限り）。インポートパスは、出力ファイル名を構築するためにも使用されます。詳細については、上記の「Compiler Invocation」セクションを参照してください。&lt;/p>
&lt;p>Go のインポートパスと &lt;code>.proto&lt;/code> ファイル内の &lt;a href="https://protobuf.dev/programming-guides/proto3#packages">&lt;code>package&lt;/code> 指定子&lt;/a>との間には、相関関係はありません。後者は protobuf の名前空間にのみ関連し、前者は Go の名前空間にのみ関連します。また、Go のインポートパスと &lt;code>.proto&lt;/code> のインポートパスとの間にも相関関係はありません。&lt;/p>
&lt;h2 id="message">メッセージ&lt;/h2>
&lt;p>単純なメッセージ宣言が与えられた場合:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Artist&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは &lt;code>Artist&lt;/code> という構造体を生成します。&lt;code>*Artist&lt;/code> は &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Message">&lt;code>proto.Message&lt;/code>&lt;/a> インターフェースを実装します。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc">&lt;code>proto&lt;/code> パッケージ&lt;/a> は、バイナリ形式への変換を含むメッセージに操作を行う関数を提供します。&lt;/p>
&lt;p>&lt;code>proto.Message&lt;/code> インターフェースは &lt;code>ProtoReflect&lt;/code> メソッドを定義しています。このメソッドは、メッセージのリフレクションベースのビューを提供する &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Message">&lt;code>protoreflect.Message&lt;/code>&lt;/a> を返します。&lt;/p>
&lt;p>&lt;code>optimize_for&lt;/code> オプションは、Go コードジェネレータの出力に影響を与えません。&lt;/p>
&lt;h3 id="ネストされた型">ネストされた型&lt;/h3>
&lt;p>メッセージは別のメッセージ内で宣言することができます。例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Artist&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、コンパイラは &lt;code>Artist&lt;/code> と &lt;code>Artist_Name&lt;/code> の 2 つの構造体を生成します。&lt;/p>
&lt;h2 id="fields">フィールド&lt;/h2>
&lt;p>プロトコルバッファコンパイラは、メッセージ内で定義された各フィールドに対して構造体フィールドを生成します。このフィールドの正確な性質は、そのタイプと単数形、繰り返し形、マップ形、または oneof フィールドかどうかによって異なります。&lt;/p>
&lt;p>生成された Go フィールド名は常にキャメルケースの命名規則を使用しますが、&lt;code>.proto&lt;/code> ファイル内のフィールド名がアンダースコアを使用した小文字であっても
(&lt;a href="https://protobuf.dev/programming-guides/style#message-field-names">それが望ましい形式&lt;/a>である場合) です。大文字への変換は次のように機能します:&lt;/p>
&lt;ol>
&lt;li>最初の文字はエクスポート用に大文字化されます。最初の文字がアンダースコアの場合、それは削除され、大文字の X が前に付加されます。&lt;/li>
&lt;li>アンダースコアの後に小文字の文字が続く場合、アンダースコアは削除され、次の文字が大文字化されます。&lt;/li>
&lt;/ol>
&lt;p>したがって、proto フィールド &lt;code>birth_year&lt;/code> は Go では &lt;code>BirthYear&lt;/code> となり、
&lt;code>_birth_year_2&lt;/code> は &lt;code>XBirthYear_2&lt;/code> となります。&lt;/p>
&lt;h3 id="singular-scalar-proto2">単一スカラーフィールド (proto2)&lt;/h3>
&lt;p>次のいずれかのフィールド定義の場合:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">birth_year&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">birth_year&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、&lt;code>Artist&lt;/code> 内の &lt;code>int32&lt;/code> 値またはフィールドが未設定の場合のデフォルト値を返す &lt;code>GetBirthYear()&lt;/code> アクセサメソッドと、&lt;code>BirthYear&lt;/code> という名前の &lt;code>*int32&lt;/code> フィールドを持つ構造体を生成します。デフォルトが明示的に設定されていない場合、そのタイプの&lt;a href="https://golang.org/ref/spec#The_zero_value">ゼロ値&lt;/a>が代わりに使用されます（数値の場合は &lt;code>0&lt;/code>、文字列の場合は空の文字列）。&lt;/p>
&lt;p>他のスカラーフィールドタイプ（&lt;code>bool&lt;/code>、&lt;code>bytes&lt;/code>、&lt;code>string&lt;/code> を含む）については、&lt;code>*int32&lt;/code> は、&lt;a href="https://protobuf.dev/programming-guides/proto2#scalar">スカラー値タイプテーブル&lt;/a>に従って対応する Go タイプに置き換えられます。&lt;/p>
&lt;h3 id="singular-scalar-proto3">単一スカラーフィールド (proto3)&lt;/h3>
&lt;p>このフィールド定義の場合:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">birth_year&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">first_active_year&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、&lt;code>birth_year&lt;/code> 内の &lt;code>int32&lt;/code> 値またはフィールドが未設定の場合のデフォルト値を返す &lt;code>GetBirthYear()&lt;/code> アクセサメソッドと、&lt;code>BirthYear&lt;/code> という名前の &lt;code>int32&lt;/code> フィールドを持つ構造体を生成します。フィールドが未設定の場合は、そのタイプの&lt;a href="https://golang.org/ref/spec#The_zero_value">ゼロ値&lt;/a>が代わりに使用されます（数値の場合は &lt;code>0&lt;/code>、文字列の場合は空の文字列）。&lt;/p>
&lt;p>他のスカラーフィールドタイプ（&lt;code>bool&lt;/code>、&lt;code>bytes&lt;/code>、&lt;code>string&lt;/code>を含む）については、&lt;code>int32&lt;/code>は、&lt;a href="https://protobuf.dev/programming-guides/proto3#scalar">スカラー値の種類テーブル&lt;/a>に従って対応するGoタイプに置き換えられます。Proto内の未設定の値は、そのタイプの&lt;a href="https://golang.org/ref/spec#The_zero_value">ゼロ値&lt;/a>として表されます（数値の場合は&lt;code>0&lt;/code>、文字列の場合は空の文字列）。&lt;/p>
&lt;h3 id="singular-message">単数メッセージフィールド&lt;/h3>
&lt;p>次のメッセージタイプが与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Band&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Band&lt;/code>フィールドを持つメッセージに対して：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// proto2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Band&lt;/span> &lt;span style="color:#000">headliner&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The generated code is the same result if required instead of optional.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// proto3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Band&lt;/span> &lt;span style="color:#000">headliner&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラはGoの構造体を生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Headliner&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Band&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メッセージフィールドは&lt;code>nil&lt;/code>に設定することができ、これはフィールドが未設定であることを意味し、実質的にフィールドをクリアします。これは、メッセージ構造体の&amp;quot;空の&amp;quot;インスタンスに値を設定するのとは等しくありません。&lt;/p>
&lt;p>コンパイラはまた、&lt;code>func (m *Concert) GetHeadliner() *Band&lt;/code>ヘルパー関数を生成します。この関数は、&lt;code>m&lt;/code>が&lt;code>nil&lt;/code>であるか&lt;code>headliner&lt;/code>が未設定の場合に&lt;code>nil&lt;/code>の&lt;code>*Band&lt;/code>を返します。これにより、中間の&lt;code>nil&lt;/code>チェックなしにget呼び出しをチェーンすることが可能になります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// デフォルトはnil
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Infof&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;GetFoundingYear() = %d (no panic!)&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetHeadliner&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">GetFoundingYear&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="repeated">繰り返しフィールド&lt;/h3>
&lt;p>各繰り返しフィールドは、Goの構造体内の&lt;code>T&lt;/code>フィールドのスライスを生成します。ここで、&lt;code>T&lt;/code>はフィールドの要素タイプです。次の繰り返しフィールドを持つメッセージに対して：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Best practice: use pluralized names for repeated fields:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// /programming-guides/style#repeated-fields
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#000">Band&lt;/span> &lt;span style="color:#000">support_acts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラはGoの構造体を生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">SupportActs&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Band&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同様に、&lt;code>repeated bytes band_promo_images = 1;&lt;/code>のフィールド定義の場合、コンパイラは&lt;code>BandPromoImage&lt;/code>という&lt;code>[][]byte&lt;/code>フィールドを持つGo構造体を生成します。&lt;code>repeated [enumeration](#enum)&lt;/code>の場合、&lt;code>repeated MusicGenre genres = 2;&lt;/code>、コンパイラは&lt;code>Genre&lt;/code>という&lt;code>[]MusicGenre&lt;/code>フィールドを持つ構造体を生成します。&lt;/p>
&lt;p>次の例は、フィールドを設定する方法を示しています：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">concert&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Concert&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">SupportActs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Band&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// First element.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Second element.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>フィールドにアクセスするには、次のようにします：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">support&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">concert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetSupportActs&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// サポートの型は []*Band です。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">b1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">support&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// b1の型は *Band で、support_actsの最初の要素です。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map">マップフィールド&lt;/h3>
&lt;p>各マップフィールドは、&lt;code>TKey&lt;/code> がフィールドのキータイプであり、&lt;code>TValue&lt;/code> がフィールドの値のタイプである &lt;code>map[TKey]TValue&lt;/code> 型の構造体内のフィールドを生成します。次のマップフィールドを持つメッセージの場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MerchItem&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">MerchBooth&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// items maps from merchandise item name (&amp;#34;Signed T-Shirt&amp;#34;) to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// a MerchItem message with more details about the item.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">MerchItem&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">items&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは次の Go 構造体を生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">MerchBooth&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Items&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">MerchItem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="oneof">ワンオブフィールド&lt;/h3>
&lt;p>ワンオブフィールドの場合、protobuf コンパイラは、インターフェースタイプ &lt;code>isMessageName_MyField&lt;/code> を持つ単一のフィールドを生成します。また、ワンオブ内の&lt;a href="#singular-scalar-proto2">単数フィールド&lt;/a>ごとに構造体を生成します。これらはすべて &lt;code>isMessageName_MyField&lt;/code> インターフェースを実装します。&lt;/p>
&lt;p>次のワンオブフィールドを持つメッセージの場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Profile&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">avatar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">image_url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">image_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは次の構造体を生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Profile&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Types that are valid to be assigned to Avatar:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// *Profile_ImageUrl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// *Profile_ImageData
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Avatar&lt;/span> &lt;span style="color:#000">isProfile_Avatar&lt;/span> &lt;span style="color:#4e9a06">`protobuf_oneof:&amp;#34;avatar&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Profile_ImageUrl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ImageUrl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Profile_ImageData&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ImageData&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>*Profile_ImageUrl&lt;/code> と &lt;code>*Profile_ImageData&lt;/code> は、空の &lt;code>isProfile_Avatar()&lt;/code> メソッドを提供することで &lt;code>isProfile_Avatar&lt;/code> を実装します。&lt;/p>
&lt;p>次の例は、フィールドを設定する方法を示しています：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">p1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Avatar&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile_ImageUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">ImageUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http://example.com/image.png&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// imageData is []byte
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">imageData&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">getImageData&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">p2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Avatar&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile_ImageData&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">ImageData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">imageData&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>フィールドにアクセスするには、値に対して型スイッチを使用して異なるメッセージタイプを処理します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">switch&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Avatar&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile_ImageUrl&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Load profile image based on URL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// using x.ImageUrl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">account&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Profile_ImageData&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Load profile image based on bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// using x.ImageData
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">case&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// The field is not set.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Profile.Avatar has unexpected type %T&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラはまた、&lt;code>func (m *Profile) GetImageUrl() string&lt;/code> および &lt;code>func (m *Profile) GetImageData() []byte&lt;/code> の取得メソッドを生成します。各取得関数は、そのフィールドの値または設定されていない場合はゼロ値を返します。&lt;/p>
&lt;h2 id="enum">列挙型&lt;/h2>
&lt;p>次のような列挙型が与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Venue&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">KIND_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">KIND_CONCERT_HALL&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">KIND_STADIUM&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">KIND_BAR&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">KIND_OPEN_AIR_FESTIVAL&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Kind&lt;/span> &lt;span style="color:#000">kind&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、その型と一連の定数を生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_UNSPECIFIED&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_CONCERT_HALL&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_STADIUM&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_BAR&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_OPEN_AIR_FESTIVAL&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メッセージ内の列挙型（上記のものなど）の場合、型名はメッセージ名で始まります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>パッケージレベルの列挙型の場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">GENRE_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">GENRE_ROCK&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">GENRE_INDIE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">GENRE_DRUM_AND_BASS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go の型名は proto 列挙型名から変更されません：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この型には、与えられた値の名前を返す &lt;code>String()&lt;/code> メソッドがあります。&lt;/p>
&lt;p>&lt;code>Enum()&lt;/code> メソッドは、与えられた値で新しく割り当てられたメモリを初期化し、対応するポインタを返します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Genre&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Enum&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Genre&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、列挙型の各値に対して定数を生成します。
メッセージ内の列挙型の場合、定数は包含メッセージの名前で始まります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_UNSPECIFIED&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_CONCERT_HALL&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_STADIUM&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_BAR&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Venue_KIND_OPEN_AIR_FESTIVAL&lt;/span> &lt;span style="color:#000">Venue_Kind&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>パッケージレベルの列挙型の場合、定数は列挙型の名前で始まります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Genre_GENRE_UNSPECIFIED&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Genre_GENRE_ROCK&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Genre_GENRE_INDIE&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Genre_GENRE_DRUM_AND_BASS&lt;/span> &lt;span style="color:#000">Genre&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、protobufコンパイラは整数値から文字列名へのマップと、名前から値へのマップも生成します：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">Genre_name&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_UNSPECIFIED&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_ROCK&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_INDIE&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_DRUM_AND_BASS&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">Genre_value&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_UNSPECIFIED&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_ROCK&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_INDIE&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;GENRE_DRUM_AND_BASS&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>.proto&lt;/code>言語では、複数の列挙型シンボルが同じ数値を持つことができます。同じ数値を持つシンボルは同義語です。これらはGoではまったく同じ方法で表され、同じ数値に対応する複数の名前があります。逆マッピングには、&lt;code>.proto&lt;/code>ファイルで最初に表示される名前に対する数値の単一エントリが含まれます。&lt;/p>
&lt;h2 id="extensions">拡張機能（proto2）&lt;/h2>
&lt;p>拡張機能の定義が与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">promo_id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">123&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>E_Promo_id&lt;/code>という名前の
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#ExtensionType">&lt;code>protoreflect.ExtensionType&lt;/code>&lt;/a>
値を生成します。この値は、メッセージ内の拡張機能にアクセスするために
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#GetExtension">&lt;code>proto.GetExtension&lt;/code>&lt;/a>、
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#SetExtension">&lt;code>proto.SetExtension&lt;/code>&lt;/a>、
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#HasExtension">&lt;code>proto.HasExtension&lt;/code>&lt;/a>、および
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#ClearExtension">&lt;code>proto.ClearExtension&lt;/code>&lt;/a>
関数と共に使用できます。&lt;code>GetExtension&lt;/code>関数と&lt;code>SetExtension&lt;/code>関数は、それぞれ拡張機能の値を含む&lt;code>interface{}&lt;/code>値を返し、受け入れます。&lt;/p>
&lt;p>単一のスカラー拡張フィールドの場合、拡張機能の値の型は、
&lt;a href="https://protobuf.dev/programming-guides/proto3#scalar">スカラー値型テーブル&lt;/a>からの対応するGo型です。&lt;/p>
&lt;p>単一の埋め込みメッセージ拡張フィールドの場合、拡張機能の値の型は&lt;code>*M&lt;/code>であり、&lt;code>M&lt;/code>はフィールドメッセージ型です。&lt;/p>
&lt;p>拡張フィールドが繰り返しの場合、拡張値の型は単数形のスライスです。&lt;/p>
&lt;p>たとえば、次の定義が与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">singular_int32&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">repeated_strings&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Band&lt;/span> &lt;span style="color:#000">singular_message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拡張値は次のようにアクセスできます：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">somepb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Concert&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_SingularInt32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_RepeatedString&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;a&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;b&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;c&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_SingularMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Band&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">v1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_SingularInt32&lt;/span>&lt;span style="color:#000;font-weight:bold">).(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">v2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_RepeatedString&lt;/span>&lt;span style="color:#000;font-weight:bold">).([][]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">v3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">E_SingularMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">).(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">extpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Band&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拡張は別の型の中にネストして宣言することができます。たとえば、次のようにするのが一般的なパターンです：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Promo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Concert&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">promo_id&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">124&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、&lt;code>ExtensionType&lt;/code> の値は &lt;code>E_Promo_Concert&lt;/code> と名前付けられています。&lt;/p>
&lt;h2 id="service">サービス&lt;/h2>
&lt;p>Goコードジェネレータはデフォルトではサービスの出力を生成しません。&lt;a href="https://www.grpc.io/">gRPC&lt;/a> プラグインを有効にすると（&lt;a href="https://github.com/grpc/grpc-go/tree/master/examples">gRPC Goクイックスタートガイド&lt;/a>を参照）、gRPCをサポートするためのコードが生成されます。&lt;/p></description></item><item><title>Reference: Go API</title><link>https://protobuf.dev/ja/reference/go/api-docs-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/go/api-docs-link/</guid><description/></item><item><title>Reference:</title><link>https://protobuf.dev/ja/reference/go/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/go/faq/</guid><description>
&lt;h2 id="バージョン">バージョン&lt;/h2>
&lt;h3 id="modules">&lt;code>github.com/golang/protobuf&lt;/code> と &lt;code>google.golang.org/protobuf&lt;/code> の違いは何ですか？&lt;/h3>
&lt;p>&lt;a href="https://pkg.go.dev/github.com/golang/protobuf?tab=overview">&lt;code>github.com/golang/protobuf&lt;/code>&lt;/a> モジュールは、元のGoプロトコルバッファAPIです。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf?tab=overview">&lt;code>google.golang.org/protobuf&lt;/code>&lt;/a> モジュールは、このAPIの更新版であり、シンプルさ、使いやすさ、安全性を考慮して設計されています。更新されたAPIの主要な機能は、リフレクションのサポートと、ユーザー向けAPIと基礎実装の分離です。&lt;/p>
&lt;p>新しいコードでは &lt;code>google.golang.org/protobuf&lt;/code> を使用することを推奨します。&lt;/p>
&lt;p>&lt;code>github.com/golang/protobuf&lt;/code> のバージョン &lt;code>v1.4.0&lt;/code> 以降は、新しい実装をラップし、プログラムが新しいAPIを段階的に採用できるようにします。たとえば、&lt;code>github.com/golang/protobuf/ptypes&lt;/code> で定義された well-known types は、単に新しいモジュールで定義されたもののエイリアスです。したがって、&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/types/known/emptypb">&lt;code>google.golang.org/protobuf/types/known/emptypb&lt;/code>&lt;/a> と &lt;a href="https://pkg.go.dev/github.com/golang/protobuf/ptypes/empty">&lt;code>github.com/golang/protobuf/ptypes/empty&lt;/code>&lt;/a> は互換性があります。&lt;/p>
&lt;h3 id="proto-versions">&lt;code>proto1&lt;/code>、&lt;code>proto2&lt;/code>、&lt;code>proto3&lt;/code> とは何ですか？&lt;/h3>
&lt;p>これらはプロトコルバッファの &lt;em>言語&lt;/em> のリビジョンです。これは、Goのプロトコルバッファの &lt;em>実装&lt;/em> とは異なります。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>proto3&lt;/code> は現在の言語のバージョンです。これは最も一般的に使用される言語のバージョンです。新しいコードでは proto3 を使用することを推奨します。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>proto2&lt;/code> は古い言語のバージョンです。proto3 に置き換えられましたが、proto2 は完全にサポートされています。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>proto1&lt;/code> は古い言語のバージョンであり、オープンソースとしてリリースされたことはありません。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="message-types">いくつかの異なる &lt;code>Message&lt;/code> タイプがあります。どれを使用すべきですか？&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Message">&lt;code>&amp;quot;google.golang.org/protobuf/proto&amp;quot;.Message&lt;/code>&lt;/a> は、現在のプロトコルバッファコンパイラによって生成されたすべてのメッセージによって実装されるインターフェース型です。&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Marshal">&lt;code>proto.Marshal&lt;/code>&lt;/a> や &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Clone">&lt;code>proto.Clone&lt;/code>&lt;/a> など、任意のメッセージに対して操作を行う関数は、この型を受け入れるか返します。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#Message">&lt;code>&amp;quot;google.golang.org/protobuf/reflect/protoreflect&amp;quot;.Message&lt;/code>&lt;/a>
は、メッセージの反射ビューを記述するインターフェース型です。&lt;/p>
&lt;p>&lt;code>proto.Message&lt;/code> 上で &lt;code>ProtoReflect&lt;/code> メソッドを呼び出すと、&lt;code>protoreflect.Message&lt;/code> を取得できます。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#ProtoMessage">&lt;code>&amp;quot;google.golang.org/protobuf/reflect/protoreflect&amp;quot;.ProtoMessage&lt;/code>&lt;/a>
は、&lt;code>&amp;quot;google.golang.org/protobuf/proto&amp;quot;.Message&lt;/code> のエイリアスです。これらの2つの型は互換性があります。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pkg.go.dev/github.com/golang/protobuf/proto?tab=doc#Message">&lt;code>&amp;quot;github.com/golang/protobuf/proto&amp;quot;.Message&lt;/code>&lt;/a>
は、古い Go プロトコルバッファ API で定義されたインターフェース型です。すべての生成されたメッセージ型はこのインターフェースを実装しますが、このインターフェースはこれらのメッセージから期待される動作を記述していません。新しいコードではこの型の使用を避けるべきです。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="一般的な問題">一般的な問題&lt;/h2>
&lt;h3 id="working-directory">&amp;ldquo;&lt;code>go install&lt;/code>&amp;rdquo;: &lt;code>working directory is not part of a module&lt;/code>&lt;/h3>
&lt;p>Go 1.15 以前では、環境変数 &lt;code>GO111MODULE=on&lt;/code> を設定し、&lt;code>go install&lt;/code> コマンドをモジュールディレクトリの外で実行しています。&lt;code>GO111MODULE=auto&lt;/code> を設定するか、環境変数をアンセットしてください。&lt;/p>
&lt;p>Go 1.16 以降では、明示的なバージョンを指定してモジュールの外で &lt;code>go install&lt;/code> を実行できます: &lt;code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest&lt;/code>&lt;/p>
&lt;h3 id="enforce-version">&lt;code>constant -1 overflows protoimpl.EnforceVersion&lt;/code>&lt;/h3>
&lt;p>新しいバージョンの &lt;code>&amp;quot;google.golang.org/protobuf&amp;quot;&lt;/code> モジュールが必要な生成された &lt;code>.pb.go&lt;/code> ファイルを使用しています。&lt;/p>
&lt;p>次のコマンドで新しいバージョンに更新してください:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go get -u google.golang.org/protobuf/proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enforce-version-apiv1">&lt;code>undefined: &amp;quot;github.com/golang/protobuf/proto&amp;quot;.ProtoPackageIsVersion4&lt;/code>&lt;/h3>
&lt;p>新しいバージョンの &lt;code>&amp;quot;github.com/golang/protobuf&amp;quot;&lt;/code> モジュールが必要な生成された &lt;code>.pb.go&lt;/code> ファイルを使用しています。&lt;/p>
&lt;p>次のコマンドで新しいバージョンに更新してください:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go get -u github.com/golang/protobuf/proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="namespace-conflict">プロトコルバッファの名前空間の競合とは何ですか？&lt;/h3>
&lt;p>すべてのプロトコルバッファ宣言は、Goバイナリにリンクされたグローバルレジストリに挿入されます。&lt;/p>
&lt;p>すべてのプロトコルバッファ宣言（たとえば、列挙型、列挙値、またはメッセージ）には、絶対名があります。これは、&lt;a href="https://protobuf.dev/programming-guides/proto2#packages">パッケージ名&lt;/a>と&lt;code>.proto&lt;/code>ソースファイル内の宣言の相対名の連結です（たとえば、&lt;code>my.proto.package.MyMessage.NestedMessage&lt;/code>）。プロトコルバッファ言語は、すべての宣言が普遍的に一意であると想定しています。&lt;/p>
&lt;p>Goバイナリにリンクされた2つのプロトコルバッファ宣言が同じ名前を持つ場合、これは名前空間の競合を引き起こし、レジストリがその宣言を名前で適切に解決することが不可能です。使用されているGo protobufsのバージョンに応じて、これは初期化時にパニックを引き起こすか、競合を無視してランタイム中に潜在的なバグを引き起こす可能性があります。&lt;/p>
&lt;h3 id="fix-namespace-conflict">プロトコルバッファの名前空間の競合を修正するには？&lt;/h3>
&lt;p>名前空間の競合を最良に修正する方法は、競合が発生している理由によって異なります。&lt;/p>
&lt;p>名前空間の競合が発生する一般的な方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>ベンダー提供の.protoファイル。&lt;/strong> 1つの&lt;code>.proto&lt;/code>ファイルが2つ以上のGoパッケージに生成され、同じGoバイナリにリンクされると、生成されたGoパッケージ内のすべてのプロトコルバッファ宣言で競合が発生します。これは通常、&lt;code>.proto&lt;/code>ファイルがベンダリングされ、それからGoパッケージが生成される場合、または生成されたGoパッケージ自体がベンダリングされる場合に発生します。ユーザーはベンダリングを避け、その&lt;code>.proto&lt;/code>ファイルに対して集中化されたGoパッケージに依存することをお勧めします。&lt;/p>
&lt;ul>
&lt;li>もし&lt;code>.proto&lt;/code>ファイルが外部の団体によって所有されており、&lt;code>go_package&lt;/code>オプションが欠けている場合、その&lt;code>.proto&lt;/code>ファイルの所有者と協力して、複数のユーザーが依存できる集中化されたGoパッケージを指定するようにする必要があります。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>欠落または一般的なprotoパッケージ名。&lt;/strong> もし&lt;code>.proto&lt;/code>ファイルがパッケージ名を指定していないか、あるいは非常に一般的なパッケージ名を使用している場合（たとえば、&amp;ldquo;my_service&amp;quot;など）、そのファイル内の宣言が他の場所での宣言と競合する可能性が高いです。私たちは、すべての&lt;code>.proto&lt;/code>ファイルに、普遍的に一意であるように故意に選択されたパッケージ名があることをお勧めします（たとえば、会社名で接頭辞を付けるなど）。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>警告:&lt;/strong> &lt;code>.proto&lt;/code> ファイルでパッケージ名を後から変更すると、拡張フィールドとして使用される型、&lt;code>google.protobuf.Any&lt;/code> に格納される型、または gRPC サービス定義に対して後方互換性がありません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Starting with v1.26.0 of the &lt;code>google.golang.org/protobuf&lt;/code> module, a hard error
will be reported when a Go program starts up that has multiple conflicting
protobuf names linked into it. While it is preferable that the source of the
conflict be fixed, the fatal error can be immediately worked around in one of
two ways:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>コンパイル時に。&lt;/strong> 衝突の処理方法のデフォルト動作は、リンカー初期化変数を使用してコンパイル時に指定できます: &lt;code>go build -ldflags &amp;quot;-X google.golang.org/protobuf/reflect/protoregistry.conflictPolicy=warn&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>プログラムの実行時に。&lt;/strong> 特定の Go バイナリを実行する際の衝突の処理方法は、環境変数を使用して設定できます: &lt;code>GOLANG_PROTOBUF_REGISTRATION_CONFLICT=warn ./main&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="deepequal">&lt;code>reflect.DeepEqual&lt;/code> はなぜ protobuf メッセージで予期しない動作をするのですか？&lt;/h3>
&lt;p>生成されたプロトコルバッファメッセージ型には、同等のメッセージ間でも異なる内部状態が含まれることがあります。&lt;/p>
&lt;p>さらに、&lt;code>reflect.DeepEqual&lt;/code> 関数はプロトコルバッファメッセージのセマンティクスを認識しておらず、存在しない差異を報告することがあります。たとえば、&lt;code>nil&lt;/code> マップを含むフィールドと、ゼロ長で非 &lt;code>nil&lt;/code> マップを含むフィールドはセマンティック的に等価ですが、&lt;code>reflect.DeepEqual&lt;/code> では等しくないと報告されます。&lt;/p>
&lt;p>メッセージの値を比較するには、&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Equal">&lt;code>proto.Equal&lt;/code>&lt;/a> 関数を使用してください。&lt;/p>
&lt;p>テストでは、&lt;a href="https://pkg.go.dev/github.com/google/go-cmp/cmp?tab=doc">&lt;code>&amp;quot;github.com/google/go-cmp/cmp&amp;quot;&lt;/code>&lt;/a> パッケージを使用して、&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/testing/protocmp#Transform">&lt;code>protocmp.Transform()&lt;/code>&lt;/a> オプションを使用できます。&lt;code>cmp&lt;/code> パッケージは任意のデータ構造を比較でき、&lt;a href="https://pkg.go.dev/github.com/google/go-cmp/cmp#Diff">&lt;code>cmp.Diff&lt;/code>&lt;/a> は値間の差異の人間が読めるレポートを生成します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">diff&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">cmp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Diff&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">protocmp&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Transform&lt;/span>&lt;span style="color:#000;font-weight:bold">());&lt;/span> &lt;span style="color:#000">diff&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;予期しない差異があります:\n%v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">diff&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ハイラムの法則">ハイラムの法則&lt;/h2>
&lt;h3 id="hyrums-law">ハイラムの法則とは何か、そしてなぜこのFAQにあるのか？&lt;/h3>
&lt;p>&lt;a href="https://www.hyrumslaw.com/">ハイラムの法則&lt;/a> は次のように述べています：&lt;/p>
&lt;blockquote>
&lt;p>APIの利用者が十分にいる場合、契約で約束したことは何であれ、システムのすべての観測可能な振る舞いは誰かに依存されることになります。&lt;/p>
&lt;/blockquote>
&lt;p>GoプロトコルバッファAPIの最新バージョンの設計目標は、将来安定して保証できない観測可能な振る舞いを提供することを可能な限り避けることです。私たちの哲学は、約束をしない領域での意図的な不安定性が、安定性の幻想を与えるよりも、将来においてプロジェクトがその誤った前提に長く依存していた場合に、より良いと考えています。&lt;/p>
&lt;h3 id="unstable-errors">エラーメッセージのテキストがなぜ変わり続けるのですか？&lt;/h3>
&lt;p>エラーメッセージのテキストに依存するテストは壊れやすく、そのテキストが変更されると頻繁に壊れます。エラーテキストの安全でない使用を desu 、このモジュールが生成するエラーのテキストは意図的に不安定です。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/mod/google.golang.org/protobuf">&lt;code>protobuf&lt;/code>&lt;/a> モジュールによって生成されたエラーを識別する必要がある場合、すべてのエラーが &lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#Error">&lt;code>proto.Error&lt;/code>&lt;/a> に一致することを保証します。&lt;/p>
&lt;h3 id="unstable-json">&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson">&lt;code>protojson&lt;/code>&lt;/a> の出力がなぜ変わり続けるのですか？&lt;/h3>
&lt;p>Goのプロトコルバッファの&lt;a href="https://protobuf.dev/programming-guides/proto3#json">JSON形式&lt;/a>の実装の長期的な安定性については何も約束しません。仕様は有効なJSONを指定していますが、マーシャラーが特定のメッセージを&lt;em>正確に&lt;/em>どのようにフォーマットすべきかについての&lt;em>標準的な&lt;/em>フォーマットの仕様は提供していません。出力が安定しているという幻想を与えるのを避けるために、わずかな違いを意図的に導入して、バイト単位の比較が失敗する可能性が高くなるようにしています。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">### [`prototext`](https://pkg.go.dev/google.golang.org/protobuf/encoding/prototext) の出力がなぜ変わり続けるのか {#unstable-text}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">Goのテキスト形式の実装の長期的な安定性については何も約束していません&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000">protobufのテキスト形式には公式の仕様がなく&lt;/span>&lt;span style="color:#a40000">、将来的に&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">prototext&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#a40000">パッケージの出力を改善できるようにしたいと考えています。パッケージの出力の安定性を保証しないため、ユーザーがそれに依存することを避けるために意図的に不安定性を導入しています。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">出力の安定性を確保するために、&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">prototext&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#a40000">の出力を&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">txtpbfmt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000;font-weight:bold">](&lt;/span>&lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">protocolbuffers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">txtpbfmt&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#a40000">プログラムを通すことをお勧めします。このフォーマッタは、&lt;/span>&lt;span style="color:#000">Goで直接呼び出すことができます&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">parser&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Format&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000;font-weight:bold">](&lt;/span>&lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">pkg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">go&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dev&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">protocolbuffers&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">txtpbfmt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">parser&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span>&lt;span style="color:#000">tab&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">doc&lt;/span>&lt;span style="color:#8f5902;font-style:italic">#Format)を使用してください。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">## その他
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">### プロトコルバッファメッセージをハッシュキーとして使用する方法は？ {#hash}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">プロトコルバッファメッセージのマーシャリングされた出力が時間の経過とともに安定であることを保証する正準シリアライゼーションが必要です。残念ながら、正準シリアライゼーションの仕様は現時点では存在しません。独自の方法を作成するか、それを必要としない方法を見つける必要があります。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">### Goプロトコルバッファ実装に新しい機能を追加できますか？ {#new-feature}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">おそらくです。提案は常に歓迎していますが、新しい機能を追加する際には非常に慎重です。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">Goのプロトコルバッファの実装は&lt;/span>&lt;span style="color:#a40000">、他の言語の実装と一貫性を保つことを目指しています。そのため、&lt;/span>&lt;span style="color:#000">Goに特化しすぎた機能は避ける傾向があります&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000">Go固有の機能は&lt;/span>&lt;span style="color:#a40000">、プロトコルバッファが言語中立のデータ交換形式であるという目標を妨げます。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#a40000">あなたのアイデアが&lt;/span>&lt;span style="color:#000">Goの実装に特化していない限り&lt;/span>&lt;span style="color:#a40000">、&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">protobufディスカッショングループ&lt;/span>&lt;span style="color:#000;font-weight:bold">](&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">groups&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">google&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">group&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#a40000">に参加してそこで提案してください。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">Goの実装に関するアイデアがある場合は&lt;/span>&lt;span style="color:#a40000">、当社のイシュートラッカーにイシューを報告してください：&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">golang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">issues&lt;/span>&lt;span style="color:#000;font-weight:bold">](&lt;/span>&lt;span style="color:#000">https&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">github&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">golang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">issues&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">### `Marshal` または `Unmarshal` にカスタマイズオプションを追加できますか？ {#new-marshal-option}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#a40000">他の実装（例：&lt;/span>&lt;span style="color:#000">C&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#a40000">、&lt;/span>&lt;span style="color:#000">Java&lt;/span>&lt;span style="color:#a40000">）にそのオプションが存在する場合のみです。プロトコルバッファ（バイナリ、&lt;/span>&lt;span style="color:#000">JSON&lt;/span>&lt;span style="color:#a40000">、およびテキスト）のエンコーディングは、実装間で一貫している必要があります。そのため、ある言語で書かれたプログラムが他の言語で書かれたメッセージを読むことができます。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000">Go&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#a40000">の実装には、少なくとも他のサポートされている実装の中で同等のオプションが存在する場合を除き、&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">Marshal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#a40000">関数によって出力されるデータに影響を与えるオプションを追加しませんし、&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">`&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#a40000">関数によって読まれるデータに影響を与えるオプションを追加しません。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">### `protoc-gen-go` によって生成されたコードをカスタマイズできますか？ {#custom-code}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#a40000">一般的には、いいえ。プロトコルバッファは言語に依存しないデータ交換形式であり、実装固有のカスタマイズはその意図に反します。&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reference:</title><link>https://protobuf.dev/ja/reference/go/size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/go/size/</guid><description>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Size">&lt;code>proto.Size&lt;/code>&lt;/a> 関数は、proto.Message のワイヤーフォーマットエンコーディングのサイズ（バイト単位）を返します。これは、すべてのフィールド（サブメッセージを含む）をトラバースして計算されます。&lt;/p>
&lt;p>特に、これは &lt;strong>Go Protobuf がメッセージをエンコードする方法のサイズ&lt;/strong> を返します。&lt;/p>
&lt;h2 id="典型的な使用法">典型的な使用法&lt;/h2>
&lt;h3 id="空のメッセージの識別">空のメッセージの識別&lt;/h3>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Size">&lt;code>proto.Size&lt;/code>&lt;/a> が 0 を返すかどうかをチェックすることは、空のメッセージを認識する簡単な方法です:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Size&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// No fields set (or, in proto3, all fields matching the default);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// skip processing this message, or return an error, or similar.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="サイズ制限付きのプログラム出力">サイズ制限付きのプログラム出力&lt;/h3>
&lt;p>別のシステムに作業タスクを生成するバッチ処理パイプラインを書いているとします。この例では、その別のシステムを「ダウンストリームシステム」と呼びます。ダウンストリームシステムは小〜中規模のタスクを処理するようにプロビジョニングされていますが、負荷テストでは、500 MB を超える作業タスクを提示するとシステムが連鎖的な障害に直面することがわかりました。&lt;/p>
&lt;p>最善の修正方法は、ダウンストリームシステムに保護を追加することです（詳細は &lt;a href="https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons">https://cloud.google.com/blog/products/gcp/using-load-shedding-to-survive-a-success-disaster-cre-life-lessons&lt;/a> を参照）。ただし、負荷分散を実装することが不可能な場合、パイプラインにクイックフィックスを追加することを決定することもできます:&lt;/p>
&lt;div class="highlight" highlight="context:1,proto.Size,1">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">beamFn&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">ProcessElement&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">emit&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Message&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">task&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">produceWorkTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Size&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Skip every work task over 100 MB to not overwhelm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// the brittle downstream system.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">emit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="誤った使用法-unmarshal-との関連がない">誤った使用法: Unmarshal との関連がない&lt;/h2>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Size">&lt;code>proto.Size&lt;/code>&lt;/a> は、Go Protobuf がメッセージをエンコードする方法のバイト数を返すため、入力された Protobuf メッセージのストリームをアンマーシャリング（デコード）する際に &lt;code>proto.Size&lt;/code> を使用することは安全ではありません:&lt;/p>
&lt;div class="highlight" highlight="context:1,proto.Size,1">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">bytesToSubscriptionList&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">vpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EventSubscription&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">subList&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">vpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EventSubscription&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">subscription&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">vpb&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EventSubscription&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">subscription&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">subList&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">subList&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">subscription&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[:&lt;/span>&lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Size&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">subscription&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">subList&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>data&lt;/code> が &lt;a href="#non-minimal">非最小ワイヤーフォーマット&lt;/a> のメッセージを含む場合、&lt;code>proto.Size&lt;/code> は実際にアンマーシャリングされたサイズと異なるサイズを返す可能性があり、解析エラー（最善の場合）または最悪の場合は誤って解析されたデータが発生します。&lt;/p>
&lt;p>したがって、この例は、すべての入力メッセージが（同じバージョンの）Go Protobufによって生成された限りにおいてのみ信頼性があります。これは驚くべきことであり、おそらく意図されていないものです。&lt;/p>
&lt;p>&lt;strong>ヒント:&lt;/strong>
&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protodelim">&lt;code>protodelim&lt;/code> パッケージ&lt;/a>
を使用して、Protobuf メッセージのサイズ区切りストリームを読み書きすることができます。&lt;/p>
&lt;h2 id="高度な使用法-バッファの事前サイズ指定">高度な使用法: バッファの事前サイズ指定&lt;/h2>
&lt;p>&lt;a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Size">&lt;code>proto.Size&lt;/code>&lt;/a> の高度な使用法は、マーシャリング前にバッファに必要なサイズを決定することです:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MarshalOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Possibly avoid an extra proto.Size in Marshal itself (see docs):
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">UseCachedSize&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// DO NOT SUBMIT without implementing this Optimization opportunity:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// instead of allocating, grab a sufficiently-sized buffer from a pool.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Knowing the size of the buffer means we can discard
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// outliers from the pool to prevent uncontrolled
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// memory growth in long-running RPC services.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Size&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">MarshalAppend&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// does not allocate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// Note that len(buf) might be less than cap(buf)! Read below:
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>遅延デコードが有効になっている場合、&lt;code>proto.Size&lt;/code> は &lt;code>proto.Marshal&lt;/code>（および &lt;code>proto.MarshalAppend&lt;/code> のような変種）が書き込るよりも多くのバイトを返す可能性があります！そのため、エンコードされたバイトをワイヤー（またはディスク）に配置する場合は、&lt;code>len(buf)&lt;/code> で作業し、以前の &lt;code>proto.Size&lt;/code> の結果を破棄してください。&lt;/p>
&lt;p>具体的には、(サブ-)メッセージは &lt;code>proto.Size&lt;/code> と &lt;code>proto.Marshal&lt;/code> の間で「縮小」する可能性があります:&lt;/p>
&lt;ol>
&lt;li>遅延デコードが有効になっている&lt;/li>
&lt;li>メッセージが &lt;a href="#non-minimal">非最小ワイヤー形式&lt;/a> で到着している&lt;/li>
&lt;li>&lt;code>proto.Size&lt;/code> が呼び出される前にメッセージがアクセスされていないため、まだデコードされていない&lt;/li>
&lt;li>&lt;code>proto.Size&lt;/code> の後（ただし &lt;code>proto.Marshal&lt;/code> の前）にメッセージがアクセスされ、それによって遅延デコードされる&lt;/li>
&lt;/ol>
&lt;p>デコードにより、後続の &lt;code>proto.Marshal&lt;/code> 呼び出しはメッセージをエンコードし（単にワイヤー形式をコピーするのではなく）、Go がメッセージをエンコードする方法に暗黙的に正規化され、現在は最小のワイヤー形式になります（ただし、それに依存しないでください！）。&lt;/p>
&lt;p>このシナリオはかなり特定されていることがわかりますが、それでも &lt;strong>&lt;code>proto.Size&lt;/code> の結果を上限として扱い、実際にエンコードされたメッセージのサイズと一致するとは決して仮定しない&lt;/strong> のが最善の方法です。&lt;/p>
&lt;h2 id="non-minimal">背景: 非最小ワイヤー形式&lt;/h2>
&lt;p>Protobuf メッセージをエンコードする際、1 つの &lt;em>最小ワイヤー形式サイズ&lt;/em> と、同じメッセージにデコードされる複数の大きな &lt;em>非最小ワイヤー形式&lt;/em> があります。&lt;/p>
&lt;p>非最小ワイヤー形式（時には「非正規化ワイヤー形式」とも呼ばれる）は、非繰り返しフィールドが複数回現れる、最適でない varint エンコーディング、ワイヤー上で非パックされたように見えるパックされた繰り返しフィールドなどのシナリオを指します。&lt;/p>
&lt;p>異なるシナリオで非最小のワイヤ形式に遭遇することがあります：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>意図的に。&lt;/strong> Protobuf は、メッセージを連結してワイヤ形式を連結することをサポートしています。&lt;/li>
&lt;li>&lt;strong>偶然に。&lt;/strong> （おそらくサードパーティの）Protobuf エンコーダが理想的にエンコードされない場合（例：varint をエンコードする際に必要以上のスペースを使用する場合）。&lt;/li>
&lt;li>&lt;strong>悪意を持って。&lt;/strong> 攻撃者は、ネットワーク上でクラッシュを引き起こすために特定の Protobuf メッセージを作成する可能性があります。&lt;/li>
&lt;/ul></description></item></channel></rss>