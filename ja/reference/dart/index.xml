<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol Buffers Documentation – Dart リファレンス</title><link>https://protobuf.dev/ja/reference/dart/</link><description>Recent content in Dart リファレンス on Protocol Buffers Documentation</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://protobuf.dev/ja/reference/dart/index.xml" rel="self" type="application/rss+xml"/><item><title>Reference: Dart Generated Code</title><link>https://protobuf.dev/ja/reference/dart/dart-generated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/dart/dart-generated/</guid><description>
&lt;p>proto2 と proto3 で生成されるコードの違いは強調されています - これらの違いは、このドキュメントで説明されている生成されたコードにありますが、ベースのAPIは両バージョンで同じです。このドキュメントを読む前に、&lt;a href="https://protobuf.dev/programming-guides/proto2">proto2 言語ガイド&lt;/a> および/または &lt;a href="https://protobuf.dev/programming-guides/proto3">proto3 言語ガイド&lt;/a> を読む必要があります。&lt;/p>
&lt;h2 id="invocation">コンパイラの呼び出し&lt;/h2>
&lt;p>プロトコルバッファコンパイラには、&lt;a href="https://github.com/dart-lang/dart-protoc-plugin">Dartコードを生成するためのプラグイン&lt;/a> が必要です。これをインストールするには、&lt;a href="https://github.com/dart-lang/dart-protoc-plugin#how-to-build-and-use">手順&lt;/a> に従って &lt;code>protoc-gen-dart&lt;/code> バイナリが提供され、&lt;code>protoc&lt;/code> が &lt;code>--dart_out&lt;/code> コマンドラインフラグを使用して呼び出されます。&lt;code>--dart_out&lt;/code> フラグは、コンパイラにDartソースファイルを書き込む場所を指示します。&lt;code>.proto&lt;/code> ファイルの入力に対して、コンパイラは &lt;code>.pb.dart&lt;/code> ファイルを生成します。&lt;/p>
&lt;p>&lt;code>.pb.dart&lt;/code> ファイルの名前は、&lt;code>.proto&lt;/code> ファイルの名前を取り、2つの変更を加えて計算されます:&lt;/p>
&lt;ul>
&lt;li>拡張子（&lt;code>.proto&lt;/code>）が &lt;code>.pb.dart&lt;/code> に置き換えられます。たとえば、&lt;code>foo.proto&lt;/code> というファイルは &lt;code>foo.pb.dart&lt;/code> という出力ファイルになります。&lt;/li>
&lt;li>protoパス（&lt;code>--proto_path&lt;/code> または &lt;code>-I&lt;/code> コマンドラインフラグで指定）は、出力パス（&lt;code>--dart_out&lt;/code> フラグで指定）に置き換えられます。&lt;/li>
&lt;/ul>
&lt;p>たとえば、次のようにコンパイラを呼び出すと:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src --dart_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build/gen src/foo.proto src/bar/baz.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは &lt;code>src/foo.proto&lt;/code> と &lt;code>src/bar/baz.proto&lt;/code> ファイルを読み込みます。&lt;code>build/gen/foo.pb.dart&lt;/code> と &lt;code>build/gen/bar/baz.pb.dart&lt;/code> を生成します。コンパイラは必要に応じてディレクトリ &lt;code>build/gen/bar&lt;/code> を自動的に作成しますが、&lt;code>build&lt;/code> または &lt;code>build/gen&lt;/code> を作成しません。これらはすでに存在している必要があります。&lt;/p>
&lt;h2 id="message">メッセージ&lt;/h2>
&lt;p>単純なメッセージ宣言が与えられた場合:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>GeneratedMessage&lt;/code> クラスを拡張する &lt;code>Foo&lt;/code> というクラスを生成します。&lt;/p>
&lt;p>&lt;code>GeneratedMessage&lt;/code> クラスは、メッセージ全体をチェック、操作、読み取り、書き込みするためのメソッドを定義しています。これらのメソッドに加えて、&lt;code>Foo&lt;/code> クラスは以下のメソッドとコンストラクタを定義しています:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Foo()&lt;/code>: デフォルトコンストラクタ。すべての単一フィールドが未設定で、繰り返しフィールドが空のインスタンスを作成します。&lt;/li>
&lt;li>&lt;code>Foo.fromBuffer(...)&lt;/code>: メッセージを表すシリアライズされたプロトコルバッファデータから &lt;code>Foo&lt;/code> を作成します。&lt;/li>
&lt;li>&lt;code>Foo.fromJson(...)&lt;/code>: メッセージをエンコードした JSON 文字列から &lt;code>Foo&lt;/code> を作成します。&lt;/li>
&lt;li>&lt;code>Foo clone()&lt;/code>: メッセージ内のフィールドのディープクローンを作成します。&lt;/li>
&lt;li>&lt;code>Foo copyWith(void Function(Foo) updates)&lt;/code>: このメッセージの書き込み可能なコピーを作成し、&lt;code>updates&lt;/code> を適用してから、コピーを読み取り専用にマークして返します。&lt;/li>
&lt;li>&lt;code>static Foo create()&lt;/code>: 単一の &lt;code>Foo&lt;/code> を作成するためのファクトリ関数です。&lt;/li>
&lt;li>&lt;code>static PbList&amp;lt;Foo&amp;gt; createRepeated()&lt;/code>: &lt;code>Foo&lt;/code> 要素の可変繰り返しフィールドを実装するリストを作成するためのファクトリ関数です。&lt;/li>
&lt;li>&lt;code>static Foo getDefault()&lt;/code>: &lt;code>Foo&lt;/code> のシングルトンインスタンスを返します。これは、新しく構築された &lt;code>Foo&lt;/code> インスタンスと同一であり、すべての単一フィールドが未設定で、すべての繰り返しフィールドが空です。&lt;/li>
&lt;/ul>
&lt;h3 id="ネストされた型">ネストされた型&lt;/h3>
&lt;p>メッセージは他のメッセージ内で宣言することができます。例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、コンパイラは &lt;code>Foo&lt;/code> と &lt;code>Foo_Bar&lt;/code> の2つのクラスを生成します。&lt;/p>
&lt;h2 id="フィールド">フィールド&lt;/h2>
&lt;p>前のセクションで説明したメソッドに加えて、プロトコルバッファコンパイラは、&lt;code>.proto&lt;/code> ファイル内で定義された各フィールドに対してアクセサメソッドを生成します。&lt;/p>
&lt;p>生成される名前は常にキャメルケースの命名規則を使用します。&lt;code>.proto&lt;/code> ファイル内のフィールド名がアンダースコアを使用している場合でも、この変換が適用されます。変換は以下のように行われます:&lt;/p>
&lt;ol>
&lt;li>名前内の各アンダースコアは削除され、次の文字が大文字になります。&lt;/li>
&lt;li>名前に接頭辞が付加される場合（例: &amp;quot;has&amp;quot;）、最初の文字は大文字になります。それ以外の場合は小文字になります。&lt;/li>
&lt;/ol>
&lt;p>したがって、&lt;code>foo_bar_baz&lt;/code> フィールドの場合、ゲッターは &lt;code>get fooBarBaz&lt;/code> となり、&lt;code>has&lt;/code> で接頭辞が付いたメソッドは &lt;code>hasFooBarBaz&lt;/code> となります。&lt;/p>
&lt;h3 id="単数のプリミティブフィールドproto2">単数のプリミティブフィールド（proto2）&lt;/h3>
&lt;p>次のいずれかのフィールド定義がある場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、メッセージクラス内に次のアクセサメソッドを生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>int get foo&lt;/code>：フィールドの現在の値を返します。フィールドが設定されていない場合は、デフォルト値を返します。&lt;/li>
&lt;li>&lt;code>bool hasFoo()&lt;/code>：フィールドが設定されている場合は &lt;code>true&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>set foo(int value)&lt;/code>：フィールドの値を設定します。これを呼び出した後、&lt;code>hasFoo()&lt;/code> は &lt;code>true&lt;/code> を返し、&lt;code>get foo&lt;/code> は &lt;code>value&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearFoo()&lt;/code>：フィールドの値をクリアします。これを呼び出した後、&lt;code>hasFoo()&lt;/code> は &lt;code>false&lt;/code> を返し、&lt;code>get foo&lt;/code> はデフォルト値を返します。&lt;/li>
&lt;/ul>
&lt;p>他の単純なフィールドタイプについては、対応する Dart タイプは、&lt;a href="https://protobuf.dev/programming-guides/proto2#scalar">スカラー値タイプテーブル&lt;/a>に従って選択されます。メッセージおよび列挙型の場合、値のタイプはメッセージまたは列挙型クラスに置き換えられます。&lt;/p>
&lt;h3 id="単数のプリミティブフィールドproto3">単数のプリミティブフィールド（proto3）&lt;/h3>
&lt;p>このフィールド定義に対して：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、メッセージクラス内に次のアクセサメソッドを生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>int get foo&lt;/code>：フィールドの現在の値を返します。フィールドが設定されていない場合は、デフォルト値を返します。&lt;/li>
&lt;li>&lt;code>set foo(int value)&lt;/code>：フィールドの値を設定します。これを呼び出した後、&lt;code>get foo&lt;/code> は &lt;code>value&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearFoo()&lt;/code>：フィールドの値をクリアします。これを呼び出した後、&lt;code>get foo&lt;/code> はデフォルト値を返します。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：&lt;/strong> Dart proto3 の実装上の特異点により、&lt;code>optional&lt;/code> 修飾子が proto 定義にない場合でも、&lt;a href="https://protobuf.dev/programming-guides/field_presence#presence-in-proto3-apis">存在セマンティクスを要求する&lt;/a>ために使用される &lt;code>hasFoo()&lt;/code> などのメソッドが生成されます。&lt;/p>
&lt;ul>
&lt;li>&lt;code>bool hasFoo()&lt;/code>：フィールドが設定されている場合は &lt;code>true&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearFoo()&lt;/code>：フィールドの値をクリアします。これを呼び出した後、&lt;code>hasFoo()&lt;/code> は &lt;code>false&lt;/code> を返し、&lt;code>get foo&lt;/code> はデフォルト値を返します。&lt;/li>
&lt;/ul>
&lt;h3 id="singular-message">単数のメッセージフィールド&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>メッセージに &lt;code>Bar&lt;/code> フィールドがある場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// proto2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Baz&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// The generated code is the same result if required instead of optional.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// proto3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Baz&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは、メッセージクラス内に以下のアクセサメソッドを生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bar get bar&lt;/code>: フィールドの現在の値を返します。フィールドが設定されていない場合は、デフォルト値を返します。&lt;/li>
&lt;li>&lt;code>set bar(Bar value)&lt;/code>: フィールドの値を設定します。これを呼び出した後、&lt;code>hasBar()&lt;/code> は &lt;code>true&lt;/code> を返し、&lt;code>get bar&lt;/code> は &lt;code>value&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>bool hasBar()&lt;/code>: フィールドが設定されている場合は &lt;code>true&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearBar()&lt;/code>: フィールドの値をクリアします。これを呼び出した後、&lt;code>hasBar()&lt;/code> は &lt;code>false&lt;/code> を返し、&lt;code>get bar&lt;/code> はデフォルト値を返します。&lt;/li>
&lt;li>&lt;code>Bar ensureBar()&lt;/code>: &lt;code>hasBar()&lt;/code> が &lt;code>false&lt;/code> を返す場合、&lt;code>bar&lt;/code> を空のインスタンスに設定し、その後 &lt;code>bar&lt;/code> の値を返します。これを呼び出した後、&lt;code>hasBar()&lt;/code> は &lt;code>true&lt;/code> を返します。&lt;/li>
&lt;/ul>
&lt;h3 id="繰り返しフィールド">繰り返しフィールド&lt;/h3>
&lt;p>このフィールド定義に対して：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">repeated&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは以下を生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>List&amp;lt;int&amp;gt; get foo&lt;/code>: フィールドをバックアップするリストを返します。フィールドが設定されていない場合は空のリストを返します。リストへの変更はフィールドに反映されます。&lt;/li>
&lt;/ul>
&lt;h3 id="int64-フィールド">Int64 フィールド&lt;/h3>
&lt;p>このフィールド定義に対して：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// proto2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// proto3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int64&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは以下を生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Int64 get bar&lt;/code>: フィールド値を含む &lt;code>Int64&lt;/code> オブジェクトを返します。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Int64&lt;/code> は Dart のコアライブラリに組み込まれていません。これらのオブジェクトを使用するには、Dart の &lt;code>fixnum&lt;/code> ライブラリをインポートする必要があるかもしれません：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;package:fixnum/fixnum.dart&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map-フィールド">Map フィールド&lt;/h3>
&lt;p>このような &lt;a href="https://protobuf.dev/programming-guides/proto3#maps">&lt;code>map&lt;/code>&lt;/a> フィールド定義がある場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">map&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">map_field&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラは以下のゲッターを生成します：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Map&amp;lt;int, int&amp;gt; get mapField&lt;/code>: フィールドをバックアップする Dart マップを返します。フィールドが設定されていない場合は空のマップを返します。マップへの変更はフィールドに反映されます。&lt;/li>
&lt;/ul>
&lt;h2 id="any">Any&lt;/h2>
&lt;p>このような &lt;a href="https://protobuf.dev/programming-guides/proto3#any">&lt;code>Any&lt;/code>&lt;/a> フィールドがある場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;google/protobuf/any.proto&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">ErrorStatus&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">google.protobuf.Any&lt;/span> &lt;span style="color:#000">details&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成されたコードでは、&lt;code>details&lt;/code> フィールドのゲッターは &lt;code>com.google.protobuf.Any&lt;/code> のインスタンスを返します。これにより、&lt;code>Any&lt;/code> の値をパックおよびアンパックするための特別なメソッドが提供されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/// Unpacks the message in [value] into [instance].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// Throws a [InvalidProtocolBufferException] if [typeUrl] does not correspond
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// to the type of [instance].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// A typical usage would be `any.unpackInto(new Message())`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// Returns [instance].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">unpackInto&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">T&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extends&lt;/span> &lt;span style="color:#000">GeneratedMessage&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">T&lt;/span> &lt;span style="color:#000">instance&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">ExtensionRegistry&lt;/span> &lt;span style="color:#000">extensionRegistry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ExtensionRegistry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EMPTY&lt;/span>&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/// Returns `true` if the encoded message matches the type of [instance].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// Can be used with a default instance:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// `any.canUnpackInto(Message.getDefault())`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">canUnpackInto&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GeneratedMessage&lt;/span> &lt;span style="color:#000">instance&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">/// Creates a new [Any] encoding [message].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// The [typeUrl] will be [typeUrlPrefix]/`fullName` where `fullName` is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/// the fully qualified name of the type of [message].
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">Any&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GeneratedMessage&lt;/span> &lt;span style="color:#000">message&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">String&lt;/span> &lt;span style="color:#000">typeUrlPrefix&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;type.googleapis.com&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="oneof">Oneof&lt;/h2>
&lt;p>&lt;a href="https://protobuf.dev/programming-guides/proto3#oneof">&lt;code>oneof&lt;/code>&lt;/a> という定義が与えられた場合、以下のように Dart の enum 型が生成されます:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Foo_Test&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">subMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">notSet&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さらに、以下のメソッドが生成されます:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Foo_Test whichTest()&lt;/code>: どのフィールドが設定されているかを示す enum を返します。どれも設定されていない場合は &lt;code>Foo_Test.notSet&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearTest()&lt;/code>: 現在設定されている oneof フィールドの値をクリアし、oneof ケースを &lt;code>Foo_Test.notSet&lt;/code> に設定します。&lt;/li>
&lt;/ul>
&lt;p>oneof 定義内の各フィールドに対して通常のフィールドアクセサメソッドが生成されます。例えば &lt;code>name&lt;/code> の場合:&lt;/p>
&lt;ul>
&lt;li>&lt;code>String get name&lt;/code>: oneof ケースが &lt;code>Foo_Test.name&lt;/code> の場合、フィールドの現在の値を返します。それ以外の場合はデフォルト値を返します。&lt;/li>
&lt;li>&lt;code>set name(String value)&lt;/code>: フィールドの値を設定し、oneof ケースを &lt;code>Foo_Test.name&lt;/code> に設定します。これを呼び出した後、&lt;code>get name&lt;/code> は &lt;code>value&lt;/code> を返し、&lt;code>whichTest()&lt;/code> は &lt;code>Foo_Test.name&lt;/code> を返します。&lt;/li>
&lt;li>&lt;code>void clearName()&lt;/code>: oneof ケースが &lt;code>Foo_Test.name&lt;/code> でない場合は何も変更されません。そうでない場合はフィールドの値をクリアします。これを呼び出した後、&lt;code>get name&lt;/code> はデフォルト値を返し、&lt;code>whichTest()&lt;/code> は &lt;code>Foo_Test.notSet&lt;/code> を返します。&lt;/li>
&lt;/ul>
&lt;h2 id="enum">Enumerations&lt;/h2>
&lt;p>以下のような enum 定義が与えられた場合、protocol buffer コンパイラは &lt;code>Color&lt;/code> というクラスを生成します。このクラスは &lt;code>ProtobufEnum&lt;/code> クラスを拡張し、4 つの値ごとに &lt;code>static const Color&lt;/code> を含み、値を含む &lt;code>static const List&amp;lt;Color&amp;gt;&lt;/code> も含まれます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">values&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">COLOR_UNSPECIFIED&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">COLOR_RED&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">COLOR_GREEN&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">COLOR_BLUE&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>また、以下のメソッドが含まれます:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static Color? valueOf(int value)&lt;/code>: 指定された数値に対応する &lt;code>Color&lt;/code> を返します。&lt;/li>
&lt;/ul>
&lt;p>各値には以下のプロパティがあります:&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>: .proto ファイルで指定された enum の名前。&lt;/li>
&lt;li>&lt;code>value&lt;/code>: .proto ファイルで指定された enum の整数値。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>.proto&lt;/code> 言語では、複数の enum シンボルが同じ数値を持つことが許可されています。同じ数値を持つシンボルは同義語です。例:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAR&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">BAZ&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、&lt;code>BAZ&lt;/code>は&lt;code>BAR&lt;/code>の同義語であり、次のように定義されます：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">BAZ&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">BAR&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>列挙型はメッセージ型の中にネストして定義することができます。たとえば、次のような列挙型の定義があるとします：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Color&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_RED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_GREEN&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_BLUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>Bar&lt;/code>というクラスを生成し、&lt;code>GeneratedMessage&lt;/code>を拡張するクラス&lt;code>Bar_Color&lt;/code>を生成します。&lt;/p>
&lt;h2 id="extension">拡張機能（proto2のみ）&lt;/h2>
&lt;p>&lt;code>foo_test.proto&lt;/code>というファイルがあり、&lt;a href="https://protobuf.dev/programming-guides/proto2#extensions">拡張範囲&lt;/a>を持つメッセージとトップレベルの拡張機能の定義が含まれている場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extensions&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#204a87;font-weight:bold">to&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">199&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">101&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>Foo&lt;/code>クラスに加えて、&lt;code>Foo_test&lt;/code>というクラスを生成します。このクラスには、ファイル内の各拡張フィールドに対する&lt;code>static Extension&lt;/code>と、&lt;code>ExtensionRegistry&lt;/code>にすべての拡張機能を登録するメソッドが含まれます：&lt;/p>
&lt;ul>
&lt;li>&lt;code>static final Extension bar&lt;/code>&lt;/li>
&lt;li>&lt;code>static void registerAllExtensions(ExtensionRegistry registry)&lt;/code>：指定されたレジストリにすべての定義済み拡張機能を登録します。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Foo&lt;/code>の拡張機能アクセサは次のように使用できます：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo_test&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">hasExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo_test&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">getExtension&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo_test&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拡張機能は、別のメッセージ内にネストして宣言することもできます：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Baz&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">extend&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">optional&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#000">bar&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">124&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、拡張機能&lt;code>bar&lt;/code>は&lt;code>Baz&lt;/code>クラスの静的メンバーとして宣言されます。&lt;/p>
&lt;p>拡張機能を持つメッセージを解析する際には、解析したい拡張機能を登録した&lt;code>ExtensionRegistry&lt;/code>を提供する必要があります。そうしないと、これらの拡張機能は未知のフィールドとして扱われます。たとえば：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExtensionRegistry&lt;/span> &lt;span style="color:#000">registry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ExtensionRegistry&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Baz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fromBuffer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>既に未知のフィールドを持つ解析済みメッセージがある場合、&lt;code>ExtensionRegistry&lt;/code>の&lt;code>reparseMessage&lt;/code>を使用してメッセージを再解析できます。未知のフィールドのセットに登録されている拡張機能がレジストリに存在する場合、これらの拡張機能が解析され、未知のフィールドセットから削除されます。メッセージにすでに存在する拡張機能は保持されます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">fromBuffer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ExtensionRegistry&lt;/span> &lt;span style="color:#000">registry&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ExtensionRegistry&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Baz&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">reparsed&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">registry&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">reparseMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この拡張を取得する方法は、全体的にコストが高いです。
可能な限り、&lt;code>GeneratedMessage.fromBuffer&lt;/code> を行う際に、必要なすべての拡張を持つ &lt;code>ExtensionRegistry&lt;/code> を使用することをお勧めします。&lt;/p>
&lt;h2 id="service">サービス&lt;/h2>
&lt;p>サービス定義が与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">service&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">rpc&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">FooRequest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">returns&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">FooResponse&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>grpc&lt;/code> オプション（例：&lt;code>--dart_out=grpc:output_folder&lt;/code>）を指定して呼び出すことができます。その場合、&lt;a href="//www.grpc.io/">gRPC&lt;/a> をサポートするコードが生成されます。詳細については、&lt;a href="https://grpc.io/docs/quickstart/dart.html">gRPC Dartクイックスタートガイド&lt;/a> を参照してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Reference: Dart API</title><link>https://protobuf.dev/ja/reference/dart/api-docs-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/dart/api-docs-link/</guid><description/></item></channel></rss>