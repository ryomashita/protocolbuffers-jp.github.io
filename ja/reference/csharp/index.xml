<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Protocol Buffers Documentation – C# リファレンス</title><link>https://protobuf.dev/ja/reference/csharp/</link><description>Recent content in C# リファレンス on Protocol Buffers Documentation</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://protobuf.dev/ja/reference/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>Reference: C# 生成コードガイド</title><link>https://protobuf.dev/ja/reference/csharp/csharp-generated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/csharp/csharp-generated/</guid><description>
&lt;p>このドキュメントを読む前に、&lt;a href="https://protobuf.dev/programming-guides/proto3">proto3 言語ガイド&lt;/a>を読むことをお勧めします。&lt;/p>
&lt;div class="alert alert-note" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
プロトコルバッファコンパイラは、リリース 3.10 から &lt;code>proto2&lt;/code> 構文を使用した定義のための C# インターフェースを生成できます。&lt;code>proto2&lt;/code> 定義のセマンティクスの詳細については、&lt;a href="https://protobuf.dev/programming-guides/proto2">proto2 言語ガイド&lt;/a>を参照し、&lt;code>docs/csharp/proto2.md&lt;/code> (&lt;a href="https://github.com/protocolbuffers/protobuf/blob/master/docs/csharp/proto2.md">GitHub で表示&lt;/a>) を参照してください。
&lt;/div>
&lt;h2 id="invocation">コンパイラの呼び出し&lt;/h2>
&lt;p>プロトコルバッファコンパイラは、&lt;code>--csharp_out&lt;/code> コマンドラインフラグを使用して C# 出力を生成します。&lt;code>--csharp_out&lt;/code> オプションのパラメータは、コンパイラが C# 出力を書き込むディレクトリですが、&lt;a href="#compiler_options">他のオプション&lt;/a>によっては、指定したディレクトリのサブディレクトリを作成する場合もあります。コンパイラは、入力の各 &lt;code>.proto&lt;/code> ファイルに対して単一のソースファイルを作成します。デフォルトでは拡張子は &lt;code>.cs&lt;/code> ですが、コンパイラオプションを介して設定可能です。&lt;/p>
&lt;p>C# コードジェネレータは &lt;code>proto3&lt;/code> メッセージのみをサポートしています。各 &lt;code>.proto&lt;/code> ファイルが次の宣言で始まることを確認してください:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="compiler_options">C# 固有のオプション&lt;/h3>
&lt;p>プロトコルバッファコンパイラに対して、&lt;code>--csharp_opt&lt;/code> コマンドラインフラグを使用してさらなる C# オプションを指定できます。サポートされているオプションは次のとおりです:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>file_extension&lt;/strong>: 生成されたコードのファイル拡張子を設定します。デフォルトは &lt;code>.cs&lt;/code> ですが、一般的な代替として、生成されたコードを含むことを示すために &lt;code>.g.cs&lt;/code> を使用することもあります。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>base_namespace&lt;/strong>: このオプションが指定されている場合、生成されたソースコードのディレクトリ階層を生成されたクラスの名前空間に対応させ、オプションの値を使用して出力ディレクトリの「ベース」と考えるべき名前空間の部分を示します。たとえば、次のコマンドラインを使用すると:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>bar --csharp_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src --csharp_opt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">base_namespace&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Example player.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>player.proto&lt;/code>に&lt;code>csharp_namespace&lt;/code>オプションが&lt;code>Example.Game&lt;/code>として指定されている場合、プロトコルバッファコンパイラは&lt;code>src/Game/Player.cs&lt;/code>というファイルを生成します。このオプションは通常、Visual StudioのC#プロジェクトでの&lt;strong>デフォルトの名前空間&lt;/strong>オプションに対応します。オプションが指定されているが空の値である場合、生成されたファイルで使用される完全なC#名前空間がディレクトリ階層に使用されます。オプションが全く指定されていない場合、生成されたファイルは単に&lt;code>--csharp_out&lt;/code>で指定されたディレクトリに書き込まれ、階層は作成されません。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>internal_access&lt;/strong>: このオプションが指定されている場合、ジェネレータは&lt;code>public&lt;/code>ではなく&lt;code>internal&lt;/code>アクセス修飾子を持つ型を作成します。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>serializable&lt;/strong>: このオプションが指定されている場合、ジェネレータは生成されたメッセージクラスに&lt;code>[Serializable]&lt;/code>属性を追加します。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>複数のオプションは、次の例のようにカンマで区切って指定できます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>protoc --proto_path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>src --csharp_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>build/gen --csharp_opt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">file_extension&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>.g.cs,base_namespace&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>Example,internal_access src/foo.proto
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="structure">ファイル構造&lt;/h2>
&lt;p>出力ファイルの名前は、&lt;code>.proto&lt;/code>ファイル名をパスカルケースに変換して、アンダースコアを単語の区切りとして扱います。例えば、&lt;code>player_record.proto&lt;/code>というファイルは、&lt;code>PlayerRecord.cs&lt;/code>という出力ファイルになります（ファイル拡張子は&lt;code>--csharp_opt&lt;/code>を使用して指定できます、&lt;a href="#compiler_options">上記の例&lt;/a>を参照）。&lt;/p>
&lt;p>各生成されたファイルは、公開メンバーの形式を取ります。（実装はここには表示されません。）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#a40000">[&lt;/span>&lt;span style="color:#000">...&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000;font-weight:bold">[...&lt;/span> &lt;span style="color:#000">descriptor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#000;font-weight:bold">...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">FileDescriptor&lt;/span> &lt;span style="color:#000">Descriptor&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000"> [... Enums ...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000"> [... Message classes ...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>namespace&lt;/code>は、protoの&lt;code>package&lt;/code>から推測され、ファイル名と同じ変換ルールを使用しています。例えば、&lt;code>example.high_score&lt;/code>というprotoパッケージは、&lt;code>Example.HighScore&lt;/code>という名前空間になります。特定の.protoファイルに対してデフォルトの生成された名前空間をオーバーライドするには、&lt;code>csharp_namespace&lt;/code>&lt;a href="https://protobuf.dev/programming-guides/proto3#options">ファイルオプション&lt;/a>を使用できます。&lt;/p>
&lt;p>各トップレベルの列挙型やメッセージは、名前空間のメンバーとして宣言される列挙型またはクラスを生成します。さらに、ファイル記述子用に常に単一の静的部分クラスが生成されます。これはリフレクションベースの操作に使用されます。記述子クラスは、拡張子を除いたファイルと同じ名前が付けられます。ただし、同じ名前のメッセージがある場合（これは非常に一般的です）、記述子クラスはメッセージと衝突しないように、ネストされた &lt;code>Proto&lt;/code> 名前空間に配置されます。&lt;/p>
&lt;p>これらのルールの例として、Protocol Buffers の一部として提供される &lt;code>timestamp.proto&lt;/code> ファイルを考えてみましょう。&lt;code>timestamp.proto&lt;/code> の簡略版は次のようになります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syntax&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;proto3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">protobuf&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">option&lt;/span> &lt;span style="color:#000">csharp_namespace&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Google.Protobuf.WellKnownTypes&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成された &lt;code>Timestamp.cs&lt;/code> ファイルの構造は次のようになります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#000">Google.Protobuf.WellKnownTypes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#000">Proto&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Timestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">FileDescriptor&lt;/span> &lt;span style="color:#000">Descriptor&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">sealed&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Timestamp&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">IMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Timestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c4a000"> [...]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="message">メッセージ&lt;/h2>
&lt;p>単純なメッセージ宣言が与えられた場合：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、&lt;code>Foo&lt;/code> という名前のシールされた部分クラスを生成し、&lt;code>IMessage&amp;lt;Foo&amp;gt;&lt;/code> インターフェースを実装します。以下にメンバー宣言を示します。詳細についてはインラインコメントを参照してください。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">sealed&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">IMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Static properties for parsing and reflection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">MessageParser&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000">Parser&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#000">MessageDescriptor&lt;/span> &lt;span style="color:#000">Descriptor&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Explicit implementation of IMessage.Descriptor, to avoid conflicting with&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// the static Descriptor property. Typically the static property is used when&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// referring to a type known at compile time, and the instance property is used&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// when referring to an arbitrary message, such as during JSON serialization.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">MessageDescriptor&lt;/span> &lt;span style="color:#000">IMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Descriptor&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Parameterless constructor which calls the OnConstruction partial method if provided.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Deep-cloning constructor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Partial method which can be implemented in manually-written code for the same class, to provide&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// a hook for code which should be run whenever an instance is constructed.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">OnConstruction&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Implementation of IDeepCloneable&amp;lt;T&amp;gt;.Clone(); creates a deep clone of this message.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">Clone&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Standard equality handling; note that IMessage&amp;lt;T&amp;gt; extends IEquatable&amp;lt;T&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">override&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">Equals&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">object&lt;/span> &lt;span style="color:#000">other&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000">Equals&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">other&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">override&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">GetHashCode&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Converts the message to a JSON representation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">override&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">ToString&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Serializes the message to the protobuf binary format&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">WriteTo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">CodedOutputStream&lt;/span> &lt;span style="color:#000">output&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Calculates the size of the message in protobuf binary format&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">CalculateSize&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Merges the contents of the given message into this one. Typically&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// used by generated code and message parsers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">MergeFrom&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000">other&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Merges the contents of the given protobuf binary format stream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// into this message. Typically used by generated code and message parsers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">MergeFrom&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">CodedInputStream&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これらのメンバーは常に存在することに注意してください。&lt;code>optimize_for&lt;/code> オプションは C# コードジェネレータの出力に影響しません。&lt;/p>
&lt;h3 id="ネスト型">ネスト型&lt;/h3>
&lt;p>メッセージは他のメッセージ内で宣言することができます。例えば：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">message&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この場合、またはメッセージがネストされた列挙型を含む場合、コンパイラはネストされた &lt;code>Types&lt;/code> クラスを生成し、その後 &lt;code>Types&lt;/code> クラス内に &lt;code>Bar&lt;/code> クラスを生成します。したがって、完全な生成されたコードは次のようになります：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span> &lt;span style="color:#a40000">[&lt;/span>&lt;span style="color:#000">...&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">sealed&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">IMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Types&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">sealed&lt;/span> &lt;span style="color:#204a87;font-weight:bold">partial&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Bar&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">IMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>中間の &lt;code>Types&lt;/code> クラスは不便ですが、メッセージ内の対応するフィールドを持つネスト型の一般的なシナリオを扱うために必要です。そうでないと、同じ名前のプロパティと型が同じクラス内にネストされることになり、それは無効な C# になります。&lt;/p>
&lt;h2 id="フィールド">フィールド&lt;/h2>
&lt;p>プロトコルバッファコンパイラは、メッセージ内で定義された各フィールドに対して C# プロパティを生成します。プロパティの具体的な性質は、フィールドの性質に依存します：その型、単数、繰り返し、またはマップフィールドであるかどうか。&lt;/p>
&lt;h3 id="singular">単数のフィールド&lt;/h3>
&lt;p>任意の単数のフィールドは読み書き可能なプロパティを生成します。&lt;code>string&lt;/code> または &lt;code>bytes&lt;/code> フィールドは、null 値が指定された場合に &lt;code>ArgumentNullException&lt;/code> を生成します。明示的に設定されていないフィールドから値を取得すると、空の文字列または &lt;code>ByteString&lt;/code> が返されます。メッセージフィールドは null 値に設定でき、これによりフィールドがクリアされます。これは、メッセージタイプの「空の」インスタンスに値を設定するのとは等しくありません。&lt;/p>
&lt;h3 id="repeated">繰り返しフィールド&lt;/h3>
&lt;p>各繰り返しフィールドは、&lt;code>Google.Protobuf.Collections.RepeatedField&amp;lt;T&amp;gt;&lt;/code> 型の読み取り専用プロパティを生成します。ここで、&lt;code>T&lt;/code> はフィールドの要素の型です。ほとんどの場合、これは &lt;code>List&amp;lt;T&amp;gt;&lt;/code> のように機能しますが、一度に複数のアイテムを追加するための &lt;code>Add&lt;/code> オーバーロードが追加されています。これは、オブジェクト初期化子で繰り返しフィールドを設定する際に便利です。さらに、&lt;code>RepeatedField&amp;lt;T&amp;gt;&lt;/code> は直列化、逆直列化、クローン作成を直接サポートしていますが、通常は生成されたコードによって使用され、手動で記述されたアプリケーションコードでは使用されません。&lt;/p>
&lt;p>繰り返しフィールドには、メッセージ型を含む null 値を含めることはできません。ただし、&lt;a href="#wrapper_types">以下で説明されている&lt;/a> nullable ラッパータイプを除いて、null 値を含めることはできます。&lt;/p>
&lt;h3 id="map">マップフィールド&lt;/h3>
&lt;p>各マップフィールドは、&lt;code>Google.Protobuf.Collections.MapField&amp;lt;TKey, TValue&amp;gt;&lt;/code> 型の読み取り専用プロパティを生成します。ここで、&lt;code>TKey&lt;/code> はフィールドのキーの型であり、&lt;code>TValue&lt;/code> はフィールドの値の型です。ほとんどの場合、これは &lt;code>Dictionary&amp;lt;TKey, TValue&amp;gt;&lt;/code> のように機能しますが、一度に別の辞書を追加するための &lt;code>Add&lt;/code> オーバーロードが追加されています。これは、オブジェクト初期化子で繰り返しフィールドを設定する際に便利です。さらに、&lt;code>MapField&amp;lt;TKey, TValue&amp;gt;&lt;/code> は直列化、逆直列化、クローン作成を直接サポートしていますが、通常は生成されたコードによって使用され、手動で記述されたアプリケーションコードでは使用されません。マップ内のキーは null であってはならず、値は、対応する単数のフィールド型が null 値をサポートする場合には null であっても構いません。&lt;/p>
&lt;h3 id="oneof">Oneof フィールド&lt;/h3>
&lt;p>Oneof 内の各フィールドには、通常の&lt;a href="#singular">単数のフィールド&lt;/a>と同様に、個別のプロパティがあります。ただし、コンパイラは、列挙型で設定されたフィールドを判断するための追加のプロパティ、列挙型、および Oneof をクリアするためのメソッドも生成します。たとえば、この Oneof フィールドの定義では&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">oneof&lt;/span> &lt;span style="color:#000">avatar&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">image_url&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bytes&lt;/span> &lt;span style="color:#000">image_data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>コンパイラはこれらのパブリックメンバを生成します:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">AvatarOneofCase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">None&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ImageUrl&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">ImageData&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">AvatarOneofCase&lt;/span> &lt;span style="color:#000">AvatarCase&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">void&lt;/span> &lt;span style="color:#000">ClearAvatar&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000">ImageUrl&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">ByteString&lt;/span> &lt;span style="color:#000">ImageData&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">get&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">set&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロパティが現在のoneof &amp;ldquo;case&amp;quot;である場合、そのプロパティを取得すると、そのプロパティに設定された値が返されます。それ以外の場合、プロパティを取得すると、プロパティの型のデフォルト値が返されます。oneofのメンバーは一度に1つだけ設定できます。&lt;/p>
&lt;p>oneofの構成プロパティを設定すると、oneofの報告される&amp;quot;case&amp;quot;が変更されます。通常の&lt;a href="#singular">単数フィールド&lt;/a>と同様に、&lt;code>string&lt;/code>または&lt;code>bytes&lt;/code>型のoneofフィールドにnull値を設定することはできません。メッセージ型のフィールドをnullに設定することは、oneof固有の&lt;code>Clear&lt;/code>メソッドを呼び出すことと同等です。&lt;/p>
&lt;h3 id="wrapper_types">ラッパータイプフィールド&lt;/h3>
&lt;p>proto3のほとんどのwell-known typesはコード生成に影響を与えませんが、ラッパータイプ（&lt;code>StringWrapper&lt;/code>、&lt;code>Int32Wrapper&lt;/code>など）はプロパティの型と動作を変更します。&lt;/p>
&lt;p>C#の値型に対応するすべてのラッパータイプ（&lt;code>Int32Wrapper&lt;/code>、&lt;code>DoubleWrapper&lt;/code>、&lt;code>BoolWrapper&lt;/code>など）は、対応する非null許容型である&lt;code>Nullable&amp;lt;T&amp;gt;&lt;/code>にマップされます。たとえば、&lt;code>DoubleValue&lt;/code>型のフィールドは、&lt;code>Nullable&amp;lt;double&amp;gt;&lt;/code>型のC#プロパティになります。&lt;/p>
&lt;p>&lt;code>StringWrapper&lt;/code>型または&lt;code>BytesWrapper&lt;/code>型のフィールドは、&lt;code>string&lt;/code>型と&lt;code>ByteString&lt;/code>型のC#プロパティが生成されますが、デフォルト値はnullであり、nullをプロパティ値として設定することができます。&lt;/p>
&lt;p>すべてのラッパータイプにおいて、null値は繰り返しフィールドでは許可されませんが、マップエントリの値として許可されます。&lt;/p>
&lt;h2 id="enum">列挙型&lt;/h2>
&lt;p>次のような列挙型の定義がある場合:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-proto" data-lang="proto">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Color&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_UNSPECIFIED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_RED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_GREEN&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span> &lt;span style="color:#000">COLOR_BLUE&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1234&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>プロトコルバッファコンパイラは、同じ値のセットを持つ&lt;code>Color&lt;/code>というC#列挙型を生成します。列挙値の名前は、C#開発者向けにより習慣的な形に変換されます:&lt;/p>
&lt;ul>
&lt;li>もとの名前が列挙型名の大文字形式で始まる場合、それが削除されます&lt;/li>
&lt;li>結果がパスカルケースに変換されます&lt;/li>
&lt;/ul>
&lt;p>したがって、上記の&lt;code>Color&lt;/code> proto列挙型は、次のC#コードになります:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">enum&lt;/span> &lt;span style="color:#000">Color&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Unspecified&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Red&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Green&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">Blue&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1234&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この名前変換は、JSON表現内で使用されるテキストに影響を与えません。&lt;/p>
&lt;p>&lt;code>.proto&lt;/code>言語では、複数の列挙シンボルが同じ数値を持つことができます。同じ数値を持つシンボルは同義語です。これらはC#ではまったく同じ方法で表現され、同じ数値に対応する複数の名前があります。&lt;/p>
&lt;p>ネストされていない列挙型は、新しい名前空間メンバーとして生成されるC#の列挙型を生成します。ネストされた列挙型は、列挙型がネストされているメッセージに対応するクラス内の&lt;code>Types&lt;/code>ネストされたクラスに生成されます。&lt;/p>
&lt;h2 id="service">サービス&lt;/h2>
&lt;p>C#コードジェネレータはサービスを完全に無視します。&lt;/p></description></item><item><title>Reference: C# API</title><link>https://protobuf.dev/ja/reference/csharp/api-docs-link/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://protobuf.dev/ja/reference/csharp/api-docs-link/</guid><description/></item></channel></rss>